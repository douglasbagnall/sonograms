#!/usr/bin/python

"""The following command

`./split-wavs-and-timings results-212.txt destination static/wav static/`

will split the files listed in results-212.txt and found under
static/wav/ into 60 second blocks and put them in static/destination.
The timing file for the minutes will be static/destination/times.txt.

The original files will not be harmed.
"""

import os, sys, subprocess
import re

def get_duration(wav):
    cmd = ["soxi", "-D", os.path.join(SRC_PREFIX, wav),]
    s = subprocess.check_output(cmd)
    return float(s)

def split_wav(wav, destpattern, size):
    cmd = [
        "sox", wav,
        destpattern,
        "trim", "0", str(size),
        ":", "newfile",
        ":", "restart",
    ]
    subprocess.check_call(cmd)


def split_timings(wav, times, destpattern, size):
    n_splits = int((get_duration(wav)) / size) + 1
    split_times = [[] for x in range(n_splits)]
    for i in range(0, len(times), 2):
        s = times[i]
        e = times[i + 1]
        s_split = int(s / size)
        e_split = int(e / size)
        split_times[s_split].append(s - s_split * size)
        while s_split < e_split:
            split_times[s_split].append(size)
            s_split += 1
            split_times[s_split].append(0)
        split_times[e_split].append(e - e_split * size)
    return [(destpattern % (i + 1), times)
            for i, times in enumerate(split_times[:-1])]


def split_wav_and_timings(wav, times, destdir, size):
    b = os.path.basename(wav).replace('.wav', '')
    wavpattern = os.path.join(destdir, b + '-%%n+%s.wav' % size)
    timepattern = wavpattern.replace('%n+', '%02d+')
    split_wav(os.path.join(SRC_PREFIX, wav),
              os.path.join(DEST_PREFIX, wavpattern), size)
    for fn, times in split_timings(wav, times, timepattern, size):
        yield ' '.join([fn] + [str(x) for x in times])

def process_timings_file(timings_file, destdir, src_prefix, dest_prefix, size):
    global DEST_PREFIX, SRC_PREFIX
    DEST_PREFIX = dest_prefix
    SRC_PREFIX = src_prefix
    f = open(timings_file)
    out = open(os.path.join(DEST_PREFIX, destdir, 'times.txt'), 'w')
    for line in f:
        bits = line.split()
        fn = bits.pop(0)
        times = [float(x) for x in bits]
        for line in split_wav_and_timings(fn, times, destdir, size):
            print >>out, line
    out.close()


DEST_PREFIX = '.'
SRC_PREFIX = '.'
process_timings_file(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4], 60)
